# frozen_string_literal: true

require "test_helper"

class TestAnthro < Minitest::Test
  def test_that_it_has_a_version_number
    refute_nil ::Anthro::VERSION
  end

  def test_weight_for_age_months
    # The data used for these tests is from the WHO and CDC growth charts
    # https://ftp.cdc.gov/pub/Health_Statistics/NCHS/growthcharts/WHO-Boys-Weight-for-age-Percentiles.csv
    # https://ftp.cdc.gov/pub/Health_Statistics/NCHS/growthcharts/WHO-Girls-Weight-for-age%20Percentiles.csv
    # https://www.cdc.gov/growthcharts/data/zscore/wtage.csv
    test_data = [
      # sex, age_months, weight, expected_percentile, expected_z_score
      ["m", 0, 2.603994, 5, -1.64485],
      ["m", 0, 2.7576207, 10, -1.28155],
      ["m", 0, 3.027282, 25, -0.67449],
      ["m", 0, 3.3464, 50, 0],
      ["m", 0, 3.5, 62.16273, 0.30976], # in between value, not included in the chart
      ["m", 0, 3.6866593, 75, 0.67449],
      ["m", 0, 4.0114991, 90, 1.28155],
      ["m", 0, 4.214527, 95, 1.64485],
      ["f", 0, 2.53214498, 5, -1.64485],
      ["f", 0, 2.6777248, 10, -1.28155],
      ["f", 0, 2.93233129, 25, -0.67449],
      ["f", 0, 3.2322, 50, 0],
      ["f", 0, 3.5503499, 75, 0.67449],
      ["f", 0, 3.8526674, 90, 1.28155],
      ["f", 0, 4.040959, 95, 1.64485],
      ["m", 12, 8.052577, 5, -1.64485],
      ["m", 12, 8.382077, 10, -1.28155],
      ["m", 12, 8.9609555, 25, -0.67449],
      ["m", 12, 9.6479, 50, 0],
      ["m", 12, 10.3838739621, 75, 0.67449],
      ["m", 12, 11.090871, 90, 1.28155],
      ["m", 12, 11.535264, 95, 1.64485],
      ["f", 12, 7.342376, 5, -1.64485],
      ["f", 12, 7.665043, 10, -1.28155],
      ["f", 12, 8.24313, 25, -0.67449],
      ["f", 12, 8.9481, 50, 0],
      ["f", 12, 9.726833, 75, 0.67449],
      ["f", 12, 10.498347, 90, 1.28155],
      ["f", 12, 10.995307, 95, 1.64485],
      ["m", 23, 9.914417, 5, -1.64485],
      ["m", 23, 10.331907, 10, -1.28155],
      ["m", 23, 11.069461, 25, -0.67449],
      ["m", 23, 11.9514, 50, 0],
      ["m", 23, 12.904235, 75, 0.67449],
      ["m", 23, 13.82718, 90, 1.28155],
      ["m", 23, 14.411077, 95, 1.64485],
      ["f", 23, 9.247632, 5, -1.64485],
      ["f", 23, 9.651002, 10, -1.28155],
      ["f", 23, 10.377131, 25, -0.67449],
      ["f", 23, 11.2688, 50, 0],
      ["f", 23, 12.261844, 75, 0.67449],
      ["f", 23, 13.25422, 90, 1.28155],
      ["f", 23, 13.898009, 95, 1.64485],
      ["m", 24, 10.38209025, 3, -1.88079],
      ["m", 24, 10.64009004, 5, -1.64485],
      ["m", 24, 11.05265567, 10, -1.28155],
      ["m", 24, 11.78597528, 25, -0.67449],
      ["m", 24, 12.6707633, 50, 0],
      ["m", 24, 13.63691949, 75, 0.67449],
      ["m", 24, 14.58339799, 90, 1.28155],
      ["m", 24, 15.18777349, 95, 1.64485],
      ["m", 24, 15.59648294, 97, 1.88079],
      ["f", 24, 9.985667562, 3, -1.88079],
      ["f", 24, 10.2102741, 5, -1.64485],
      ["f", 24, 10.57373483, 10, -1.28155],
      ["f", 24, 11.23356786, 25, -0.67449],
      ["f", 24, 12.05503983, 50, 0],
      ["f", 24, 12.98666951, 75, 0.67449],
      ["f", 24, 13.93766409, 90, 1.28155],
      ["f", 24, 14.56636479, 95, 1.64485],
      ["f", 24, 15.00156359, 97, 1.88079],
      ["m", 130.5, 26.16795559, 3, -1.88079],
      ["m", 130.5, 27.0445704, 5, -1.64485],
      ["m", 130.5, 28.51890714, 10, -1.28155],
      ["m", 130.5, 31.38911963, 25, -0.67449],
      ["m", 130.5, 35.36561737, 50, 0],
      ["m", 130.5, 40.53449819, 75, 0.67449],
      ["m", 130.5, 46.72511793, 90, 1.28155],
      ["m", 130.5, 51.45751679, 95, 1.64485],
      ["m", 130.5, 55.09703793, 97, 1.88079],
      ["f", 130.5, 26.31852113, 3, -1.88079],
      ["f", 130.5, 27.31287184, 5, -1.64485],
      ["f", 130.5, 28.98217994, 10, -1.28155],
      ["f", 130.5, 32.21670522, 25, -0.67449],
      ["f", 130.5, 36.65236365, 50, 0],
      ["f", 130.5, 42.31600037, 75, 0.67449],
      ["f", 130.5, 48.91819978, 90, 1.28155],
      ["f", 130.5, 53.81837358, 95, 1.64485],
      ["f", 130.5, 57.49615297, 97, 1.88079],
      ["m", 240, 54.00391729, 3, -1.88079],
      ["m", 240, 55.66071006, 5, -1.64485],
      ["m", 240, 58.41104572, 10, -1.28155],
      ["m", 240, 63.6361125, 25, -0.67449],
      ["m", 240, 70.59761453, 50, 0],
      ["m", 240, 79.18111482, 75, 0.67449],
      ["m", 240, 88.80643527, 90, 1.28155],
      ["m", 240, 95.71431427, 95, 1.64485],
      ["m", 240, 100.7783809, 97, 1.88079],
      ["f", 240, 45.04654822, 3, -1.88079],
      ["f", 240, 46.28963394, 5, -1.64485],
      ["f", 240, 48.38346004, 10, -1.28155],
      ["f", 240, 52.47876433, 25, -0.67449],
      ["f", 240, 58.21897289, 50, 0],
      ["f", 240, 65.85237979, 75, 0.67449],
      ["f", 240, 75.35164989, 90, 1.28155],
      ["f", 240, 82.95375457, 95, 1.64485],
      ["f", 240, 89.04485133, 97, 1.88079]
    ]
    test_data.each do |sex, age_months, value, percentile, z_score|
      result = Anthro.weight_for_age(sex: sex, age_months: age_months, value: value)
      assert_in_delta percentile, result.percentile, 0.00001,
                      "sex: #{sex}, age_months: #{age_months}, value: #{value}, percentile: #{percentile}"
      assert_in_delta z_score, result.z_score, 0.00001,
                      "sex: #{sex}, age_months: #{age_months}, value: #{value}, z_score: #{z_score}"
    end
  end

  def test_height_for_age_months
    # The data used for these tests is from the WHO and CDC growth charts
    # https://ftp.cdc.gov/pub/Health_Statistics/NCHS/growthcharts/WHO-Boys-Length-for-age-Percentiles.csv
    # https://ftp.cdc.gov/pub/Health_Statistics/NCHS/growthcharts/WHO-Girls-Length-for-age-Percentiles.csv
    # https://www.cdc.gov/growthcharts/data/zscore/statage.csv
    test_data = [
      # sex, age_months, height, expected_percentile, expected_z_score
      ["m", 0, 46.77032, 5, -1.64485],
      ["m", 0, 47.458088, 10, -1.28155],
      ["m", 0, 48.60732, 25, -0.67449],
      ["m", 0, 49.8842, 50, 0],
      ["m", 0, 51.16108, 75, 0.67449],
      ["m", 0, 52.310313, 90, 1.28155],
      ["m", 0, 52.99808, 95, 1.64485],
      ["f", 0, 46.083834, 5, -1.64485],
      ["f", 0, 46.760557, 10, -1.28155],
      ["f", 0, 47.891329, 25, -0.67449],
      ["f", 0, 49.1477, 50, 0],
      ["f", 0, 50.404071, 75, 0.67449],
      ["f", 0, 51.534843, 90, 1.28155],
      ["f", 0, 52.211567, 95, 1.64485],
      ["m", 12, 71.840234, 5, -1.64485],
      ["m", 12, 72.703525, 10, -1.28155],
      ["m", 12, 74.14605, 25, -0.67449],
      ["m", 12, 75.7488, 50, 0],
      ["m", 12, 77.35155, 75, 0.67449],
      ["m", 12, 78.794074, 90, 1.28155],
      ["m", 12, 79.657368, 95, 1.64485],
      ["f", 12, 69.77953, 5, -1.64485],
      ["f", 12, 70.715029, 10, -1.28155],
      ["f", 12, 71, 12.08231, -1.170882], # in between value, not included in the chart
      ["f", 12, 72.278201, 25, -0.67449],
      ["f", 12, 74.015, 50, 0],
      ["f", 12, 75.7517995, 75, 0.67449],
      ["f", 12, 77.314973, 90, 1.28155],
      ["f", 12, 78.25047, 95, 1.64485],
      ["m", 23, 82.01447, 5, -1.64485],
      ["m", 23, 83.1026042494, 10, -1.28155],
      ["m", 23, 84.920824, 25, -0.67449],
      ["m", 23, 86.941, 50, 0],
      ["m", 23, 88.961176, 75, 0.67449],
      ["m", 23, 90.779398, 90, 1.28155],
      ["m", 23, 91.86753, 95, 1.64485],
      ["f", 23, 80.3, 5, -1.64485],
      ["f", 23, 81.452999, 10, -1.28155],
      ["f", 23, 83.379602, 25, -0.67449],
      ["f", 23, 85.5202, 50, 0],
      ["f", 23, 87.660798, 75, 0.67449],
      ["f", 23, 89.587403, 90, 1.28155],
      ["f", 23, 90.7404, 95, 1.64485],
      ["m", 24, 79.91084447, 3, -1.88079],
      ["m", 24, 80.72977321, 5, -1.64485],
      ["m", 24, 81.99171445, 10, -1.28155],
      ["m", 24, 84.10289217, 25, -0.67449],
      ["m", 24, 86.45220101, 50, 0],
      ["m", 24, 88.80524943, 75, 0.67449],
      ["m", 24, 90.92619137, 90, 1.28155],
      ["m", 24, 92.19687928, 95, 1.64485],
      ["m", 24, 93.02265441, 97, 1.88079],
      ["f", 24, 78.43754166, 3, -1.88079],
      ["f", 24, 79.25981989, 5, -1.64485],
      ["f", 24, 80.52476467, 10, -1.28155],
      ["f", 24, 82.63523563, 25, -0.67449],
      ["f", 24, 84.97555512, 50, 0],
      ["f", 24, 87.31121356, 75, 0.67449],
      ["f", 24, 89.40951159, 90, 1.28155],
      ["f", 24, 90.66354871, 95, 1.64485],
      ["f", 24, 91.47728689, 97, 1.88079],
      ["m", 130.5, 130.095765, 3, -1.88079],
      ["m", 130.5, 131.6686134, 5, -1.64485],
      ["m", 130.5, 134.1088817, 10, -1.28155],
      ["m", 130.5, 138.2362048, 25, -0.67449],
      ["m", 130.5, 142.8949403, 50, 0],
      ["m", 130.5, 147.630483, 75, 0.67449],
      ["m", 130.5, 151.9582822, 90, 1.28155],
      ["m", 130.5, 154.5780465, 95, 1.64485],
      ["m", 130.5, 156.2913356, 97, 1.88079],
      ["f", 130.5, 129.8106385, 3, -1.88079],
      ["f", 130.5, 131.4572565, 5, -1.64485],
      ["f", 130.5, 134.0071586, 10, -1.28155],
      ["f", 130.5, 138.3067365, 25, -0.67449],
      ["f", 130.5, 143.1403553, 50, 0],
      ["f", 130.5, 148.0328573, 75, 0.67449],
      ["f", 130.5, 152.4861414, 90, 1.28155],
      ["f", 130.5, 155.1736815, 95, 1.64485],
      ["f", 130.5, 156.9280012, 97, 1.88079],
      ["m", 240, 163.3333326, 3, -1.88079],
      ["m", 240, 165.0388523, 5, -1.64485],
      ["m", 240, 167.6592824, 10, -1.28155],
      ["m", 240, 172.0227268, 25, -0.67449],
      ["m", 240, 176.8492322, 50, 0],
      ["m", 240, 181.6537998, 75, 0.67449],
      ["m", 240, 185.9599411, 90, 1.28155],
      ["m", 240, 188.5290125, 95, 1.64485],
      ["m", 240, 190.1943135, 97, 1.88079],
      ["f", 240, 151.1111674, 3, -1.88079],
      ["f", 240, 152.6507234, 5, -1.64485],
      ["f", 240, 155.0180729, 10, -1.28155],
      ["f", 240, 158.9651429, 25, -0.67449],
      ["f", 240, 163.338251, 50, 0],
      ["f", 240, 167.6987436, 75, 0.67449],
      ["f", 240, 171.6128653, 90, 1.28155],
      ["f", 240, 173.9506901, 95, 1.64485],
      ["f", 240, 175.4671292, 97, 1.88079]
    ]
    test_data.each do |sex, age_months, value, percentile, z_score|
      result = Anthro.height_for_age(sex: sex, age_months: age_months, value: value)
      assert_in_delta percentile, result.percentile, 0.00001,
                      "sex: #{sex}, age_months: #{age_months}, value: #{value}, percentile: #{percentile}"
      assert_in_delta z_score, result.z_score, 0.00001,
                      "sex: #{sex}, age_months: #{age_months}, value: #{value}, z_score: #{z_score}"
    end
  end

  def test_bmi_for_age_months
    # The data used for these tests is from the WHO and CDC growth charts
    # https://www.cdc.gov/growthcharts/data/zscore/bmiagerev.csv
    test_data = [
      # sex, age_months, BMI, expected_percentile, expected_z_score
      ["m", 24, 14.52095333, 3, -1.88079],
      ["m", 24, 14.73731947, 5, -1.64485],
      ["m", 24, 15.09032827, 10, -1.28155],
      ["m", 24, 15.74164233, 25, -0.67449],
      ["m", 24, 16.57502768, 50, 0],
      ["m", 24, 17.55718781, 75, 0.67449],
      ["m", 24, 18.60948128, 90, 1.28155],
      ["m", 24, 19.33801062, 95, 1.64485],
      ["m", 24, 19.85985812, 97, 1.88079],
      ["f", 24, 14.1473467, 3, -1.88079],
      ["f", 24, 14.3, 4.12775, -1.73605], # in between value, not included in the chart
      ["f", 24, 14.39787089, 5, -1.64485],
      ["f", 24, 14.80134054, 10, -1.28155],
      ["f", 24, 15.52807587, 25, -0.67449],
      ["f", 24, 16.42339664, 50, 0],
      ["f", 24, 17.42745659, 75, 0.67449],
      ["f", 24, 18.44139317, 90, 1.28155],
      ["f", 24, 19.10623522, 95, 1.64485],
      ["f", 24, 19.56410958, 97, 1.88079],
      ["m", 130.5, 14.22782193, 3, -1.88079],
      ["m", 130.5, 14.49755765, 5, -1.64485],
      ["m", 130.5, 14.95184482, 10, -1.28155],
      ["m", 130.5, 15.84254502, 25, -0.67449],
      ["m", 130.5, 17.10389705, 50, 0],
      ["m", 130.5, 18.82579454, 75, 0.67449],
      ["m", 130.5, 21.08690037, 90, 1.28155],
      ["m", 130.5, 23.03914551, 95, 1.64485],
      ["m", 130.5, 24.73196683, 97, 1.88079],
      ["f", 130.5, 14.02224218, 3, -1.88079],
      ["f", 130.5, 14.33691178, 5, -1.64485],
      ["f", 130.5, 14.86677084, 10, -1.28155],
      ["f", 130.5, 15.90409584, 25, -0.67449],
      ["f", 130.5, 17.3655072, 50, 0],
      ["f", 130.5, 19.33543894, 75, 0.67449],
      ["f", 130.5, 21.85554562, 90, 1.28155],
      ["f", 130.5, 23.95048756, 95, 1.64485],
      ["f", 130.5, 25.69431763, 97, 1.88079],
      ["m", 240, 18.70273741, 3, -1.88079],
      ["m", 240, 19.12055111, 5, -1.64485],
      ["m", 240, 19.81910123, 10, -1.28155],
      ["m", 240, 21.16744563, 25, -0.67449],
      ["m", 240, 23.02029424, 50, 0],
      ["m", 240, 25.4235294, 75, 0.67449],
      ["m", 240, 28.32769753, 90, 1.28155],
      ["m", 240, 30.58964285, 95, 1.64485],
      ["m", 240, 32.36536586, 97, 1.88079],
      ["f", 240, 17.43031075, 3, -1.88079],
      ["f", 240, 17.82009046, 5, -1.64485],
      ["f", 240, 18.48195582, 10, -1.28155],
      ["f", 240, 19.80017572, 25, -0.67449],
      ["f", 240, 21.71699934, 50, 0],
      ["f", 240, 24.44009565, 75, 0.67449],
      ["f", 240, 28.23727135, 90, 1.28155],
      ["f", 240, 31.76474311, 95, 1.64485],
      ["f", 240, 35.05675093, 97, 1.88079]
    ]
    test_data.each do |sex, age_months, value, percentile, z_score|
      result = Anthro.bmi_for_age(sex: sex, age_months: age_months, value: value)
      assert_in_delta percentile, result.percentile, 0.00001,
                      "sex: #{sex}, age_months: #{age_months}, value: #{value}, percentile: #{percentile}"
      assert_in_delta z_score, result.z_score, 0.00001,
                      "sex: #{sex}, age_months: #{age_months}, value: #{value}, z_score: #{z_score}"
    end
  end

  def test_head_circumference_for_age_months
    # The data used for these tests is from the WHO and CDC growth charts
    # https://ftp.cdc.gov/pub/Health_Statistics/NCHS/growthcharts/WHO-Boys-Head-Circumference-for-age-Percentiles.csv
    # https://ftp.cdc.gov/pub/Health_Statistics/NCHS/growthcharts/WHO-Girls-Head-Circumference-for-age-Percentiles.csv
    test_data = [
      # sex, age_months, head_circumference, expected_percentile, expected_z_score
      ["m", 0, 32.3724062, 5, -1.64485],
      ["m", 0, 32.833894, 10, -1.28155],
      ["m", 0, 33.605021, 25, -0.67449],
      ["m", 0, 34.4618, 50, 0],
      ["m", 0, 35.318579, 75, 0.67449],
      ["m", 0, 36.089706, 90, 1.28155],
      ["m", 0, 36.5511946, 95, 1.64485],
      ["f", 0, 31.930537, 5, -1.64485],
      ["f", 0, 32.360831, 10, -1.28155],
      ["f", 0, 33.079835, 25, -0.67449],
      ["f", 0, 33.8787, 50, 0],
      ["f", 0, 34.677565, 75, 0.67449],
      ["f", 0, 35.396569, 90, 1.28155],
      ["f", 0, 35.826863, 95, 1.64485],
      ["m", 12, 43.95282, 5, -1.64485],
      ["m", 12, 44.419583, 10, -1.28155],
      ["m", 12, 45.199527, 25, -0.67449],
      ["m", 12, 46.0661, 50, 0],
      ["m", 12, 46.932673, 75, 0.67449],
      ["m", 12, 47.712617, 90, 1.28155],
      ["m", 12, 48.17938, 95, 1.64485],
      ["f", 12, 42.661117, 5, -1.64485],
      ["f", 12, 43.15485, 10, -1.28155],
      ["f", 12, 43.979857, 25, -0.67449],
      ["f", 12, 44.8965, 50, 0],
      ["f", 12, 45.813143, 75, 0.67449],
      ["f", 12, 46.63815, 90, 1.28155],
      ["f", 12, 47.131883, 95, 1.64485],
      ["m", 23, 45.89043, 5, -1.64485],
      ["m", 23, 46.382902, 10, -1.28155],
      ["m", 23, 47.2058, 25, -0.67449],
      ["m", 23, 48.1201, 50, 0],
      ["m", 23, 49.0344, 75, 0.67449],
      ["m", 23, 49.857298, 90, 1.28155],
      ["m", 23, 50.34977, 95, 1.64485],
      ["f", 23, 44.747329, 5, -1.64485],
      ["f", 23, 45.253517, 10, -1.28155],
      ["f", 23, 46.099335, 25, -0.67449],
      ["f", 23, 47.0391, 50, 0],
      ["f", 23, 47.978865, 75, 0.67449],
      ["f", 23, 48.5, 85.28003, 1.04852], # in between value, not included in the chart
      ["f", 23, 48.824683, 90, 1.28155],
      ["f", 23, 49.330871, 95, 1.64485]
    ]
    test_data.each do |sex, age_months, value, percentile, z_score|
      result = Anthro.head_circumference_for_age(sex: sex, age_months: age_months, value: value)
      assert_in_delta percentile, result.percentile, 0.00001,
                      "sex: #{sex}, age_months: #{age_months}, value: #{value}, percentile: #{percentile}"
      assert_in_delta z_score, result.z_score, 0.00001,
                      "sex: #{sex}, age_months: #{age_months}, value: #{value}, z_score: #{z_score}"
    end
  end

  def test_invalid_measurement_type
    assert_raises(ArgumentError) do
      Anthro::Calculator.new(measurement_type: :invalid, sex: "male", age_months: 24, value: 12.5)
    end
  end

  def test_invalid_sex
    assert_raises(ArgumentError) do
      Anthro.weight_for_age(sex: "invalid", age_months: 24, value: 12.5)
    end
  end

  def test_invalid_age
    assert_raises(ArgumentError) do
      # Age must be from 0 to 240 months (20 years)
      Anthro.weight_for_age(sex: "male", age_months: 300, value: 12.5)
    end
    assert_raises(ArgumentError) do
      # Age must be from 24 to 240 months (2 years to 20 years) for BMI
      Anthro.bmi_for_age(sex: "male", age_months: 23, value: 12.5)
    end
    assert_raises(ArgumentError) do
      # Age must be from 24 to 240 months (2 years to 20 years) for BMI
      Anthro.bmi_for_age(sex: "male", age_months: 300, value: 12.5)
    end
    assert_raises(ArgumentError) do
      # Age must be from 0 to 24 months (0 to 2 years) for head circumference
      Anthro.head_circumference_for_age(sex: "male", age_months: 24.1, value: 12.5)
    end
  end

  def test_negative_value
    assert_raises(ArgumentError) do
      Anthro.weight_for_age(sex: "male", age_months: 24, value: -5.0)
    end
  end

  def test_both_age_months_and_age_days
    assert_raises(ArgumentError) do
      Anthro.weight_for_age(sex: "male", age_months: 24, age_days: 730, value: 12.5)
    end
  end

  def test_missing_age
    assert_raises(ArgumentError) do
      Anthro.head_circumference_for_age(sex: "female", value: 45.0)
    end
  end
end
